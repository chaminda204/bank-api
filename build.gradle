plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //validation
   // implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate:hibernate-validator:7.0.1.Final'

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    //database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    //testing
    testImplementation('org.spockframework:spock-core:2.0-M3-groovy-3.0')
    testImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0')
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.8'

    testImplementation 'io.rest-assured:rest-assured:4.4.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}


sourceSets {
    functionalTest {
        groovy.srcDir "$projectDir/src/functionalTest/groovy"
        resources.srcDir "$projectDir/src/functionalTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task functionalTest(type: Test) {
    description = 'Run functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
}


test {
    useJUnitPlatform()
}

//bootRun {
//    bootRun.systemProperty 'spring.profiles.active', "${springProfile}"
//}
